{
	"name": "FunctionCode_Flowlet",
	"properties": {
		"folder": {
			"name": "FunctionCodeRules"
		},
		"type": "Flowlet",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "FinBlobConnectionPublic",
						"type": "LinkedServiceReference"
					},
					"name": "FLFetchCostCenterHC"
				},
				{
					"linkedService": {
						"referenceName": "FinBlobConnectionPublic",
						"type": "LinkedServiceReference"
					},
					"name": "FLFetchProductLineHC"
				},
				{
					"linkedService": {
						"referenceName": "FinBlobConnectionPublic",
						"type": "LinkedServiceReference"
					},
					"name": "FLFetchSpendCategoriesHC"
				},
				{
					"linkedService": {
						"referenceName": "FinBlobConnectionPublic",
						"type": "LinkedServiceReference"
					},
					"name": "FLFetchRevenueCategories"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SurrogateCCHCKey",
					"description": "Adding new key CCHC_UniqueKey starting from 1 with step 1"
				},
				{
					"name": "FlattenCCHC",
					"description": "Unrolling arrays from HierarchicParents to  with columns 'ReferenceId, Name, Inactive, CostCenterDescriptor, CostCenterWID, CostCenterOrganizationReferenceID, CostCenterReferenceID, Descriptor, WID, OrganizationReferenceID, CompanyRestrictionsDescriptor, CompanyRestrictionsWID, CompanyRestrictionsOrganizationReferenceID, CompanyRestrictionsCompanyReferenceID, ProductLineDescriptor, ProductLineWID, ProductLineOrganizationReferenceID, SegmentDescriptor, SegmentWID, SegmentOrganizationReferenceID, SegmentCustomOrganizationReference_ID, FunctionDescriptor, FunctionWID, FunctionOrganizationReferenceId, FunctionCustomOrganizationReferenceId, VerticalDescriptor, VerticalWID, VerticalOrganizationReferenceID, VerticalCustomOrganizationReferenceID, RegionDescriptor, RegionWID, RegionOrganizationReferenceID, RegionRegionReferenceID, LocationDescriptor, LocationWID, LocationID, ManagerWID, ManagerDescriptor, ManagerEmployeeID, GrpManagerCCMName, GrpManagerCCJobTitle, LocRefID, FISDistrict, FISPandlType, FMSAreaCode, EffectiveDate, IsTeam, TeamCode, SubTeamCode, LegacyClsCd, CCHC_UniqueKey'"
				},
				{
					"name": "SelectCCHC"
				},
				{
					"name": "DeriveFunctionCode"
				},
				{
					"name": "FilterCCHC"
				},
				{
					"name": "SelectAllCC"
				},
				{
					"name": "SurrogatePLKey"
				},
				{
					"name": "FlattenPLHC"
				},
				{
					"name": "FilterPLHC"
				},
				{
					"name": "SelectPLHC"
				},
				{
					"name": "SurrogateSCKey"
				},
				{
					"name": "FlattenSCHC"
				},
				{
					"name": "FilterSCHC"
				},
				{
					"name": "SelectSCHC"
				},
				{
					"name": "MergeCC"
				},
				{
					"name": "MergeCCHC"
				},
				{
					"name": "MergePLHC"
				},
				{
					"name": "MergeSCHC"
				},
				{
					"name": "SurrogateRCKey"
				},
				{
					"name": "FilterRCHC"
				},
				{
					"name": "SelectRCHC"
				},
				{
					"name": "MergeRCHC"
				},
				{
					"name": "FlattenRCHC"
				},
				{
					"name": "FunctionCodeRulesInput"
				},
				{
					"name": "FunctionCodeRulesOutput"
				}
			],
			"scriptLines": [
				"parameters{",
				"     PublicContainerBlob as string ('rhub-fin-adf-inbound'),",
				"     PublicFolderBlob as string ('FININT1001JournalEntries/Enrich/0de932d8-dafe-40b1-b383-2ceff285d756'),",
				"     PublicFileBlobCCHC as string ('FININT1001RHcEnrichTrigger_0de932d8-dafe-40b1-b383-2ceff285d756_costcenterhierarchy.json'),",
				"     PublicFileBlobSCHC as string ('FININT1001RHcEnrichTrigger_0de932d8-dafe-40b1-b383-2ceff285d756_spendcategoryhierarchy.json'),",
				"     PublichFileBlobPLHC as string ('FININT1001RHcEnrichTrigger_0de932d8-dafe-40b1-b383-2ceff285d756_productlinehierarchy.json'),",
				"     PublicFileBlobRCHC as string",
				"}",
				"input(output(",
				"          TargetAccountNumber as string,",
				"          TargetAcccountSegmentRollUp as string,",
				"          TargetCostCenter as string,",
				"          TargetSpendCategory as string,",
				"          TargetRenvenueCategory as string,",
				"          TargetProductLine as string,",
				"          RecordUniqueId as integer",
				"     ),",
				"     order: 0,",
				"     allowSchemaDrift: true) ~> FunctionCodeRulesInput",
				"source(output(",
				"          AssignedCustomerHierarchy as (Descriptor as string, OrganizationReferenceID as string, WID as string),",
				"          AssignedCustomerHierarchyRefID as string,",
				"          CompanyCurrency as string,",
				"          CompanyRestrictionsCompanyReferenceID as string,",
				"          CompanyRestrictionsDescriptor as string,",
				"          CompanyRestrictionsOrganizationReferenceID as string,",
				"          CompanyRestrictionsWID as string,",
				"          CostCenterDescriptor as string,",
				"          CostCenterOrganizationReferenceID as string,",
				"          CostCenterReferenceID as string,",
				"          CostCenterWID as string,",
				"          DefaultCostCenter as string,",
				"          EffectiveDate as string,",
				"          FISDistrict as short,",
				"          FISPandlType as string,",
				"          FMSAreaCode as short,",
				"          FunctionCustomOrganizationReferenceId as string,",
				"          FunctionDescriptor as string,",
				"          FunctionOrganizationReferenceId as string,",
				"          FunctionWID as string,",
				"          GrpManagerCCJobTitle as string,",
				"          GrpManagerCCMName as string,",
				"          HierarchicParents as (Descriptor as string, OrganizationReferenceID as string, WID as string)[],",
				"          Inactive as boolean,",
				"          IsTeam as boolean,",
				"          LegacyClsCd as string,",
				"          LegalCompanyCode as short,",
				"          LegalCountry as string,",
				"          LocRefID as short,",
				"          LocationDescriptor as string,",
				"          LocationID as short,",
				"          LocationWID as string,",
				"          ManagerDescriptor as string,",
				"          ManagerEmployeeID as integer,",
				"          ManagerWID as string,",
				"          Name as string,",
				"          ProductLineDescriptor as string,",
				"          ProductLineOrganizationReferenceID as string,",
				"          ProductLineWID as string,",
				"          ReferenceId as string,",
				"          RegionDescriptor as string,",
				"          RegionOrganizationReferenceID as string,",
				"          RegionWID as string,",
				"          ScsDtsCustomer as string,",
				"          ScsDtsType as string,",
				"          SegmentDescriptor as string,",
				"          SegmentOrganizationReferenceID as string,",
				"          SegmentWID as string,",
				"          SubTeamCode as string,",
				"          TeamCode as string,",
				"          TeamName as string,",
				"          VerticalCustomOrganizationReferenceID as string,",
				"          VerticalDescriptor as string,",
				"          VerticalOrganizationReferenceID as string,",
				"          VerticalWID as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     container: ($PublicContainerBlob),",
				"     folderPath: ($PublicFolderBlob),",
				"     fileName: ($PublicFileBlobCCHC),",
				"     documentForm: 'documentPerLine') ~> FLFetchCostCenterHC",
				"source(output(",
				"          Availibility_Date as string,",
				"          HierarchicParents as (Descriptor as string, OrganizationReferenceID as string, WID as string)[],",
				"          Inactive as boolean,",
				"          InactiveDate as string,",
				"          LastUpdatedDate as string,",
				"          Name as string,",
				"          ProductLineCode as string,",
				"          ReferenceID as string,",
				"          WID as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     container: ($PublicContainerBlob),",
				"     folderPath: ($PublicFolderBlob),",
				"     fileName: ($PublichFileBlobPLHC),",
				"     documentForm: 'documentPerLine') ~> FLFetchProductLineHC",
				"source(output(",
				"          FMSFunctionHierarchy as (Descriptor as string, OrganizationReferenceID as string, WID as string)[],",
				"          LookupKey as string,",
				"          ReferenceID as string,",
				"          ReferenceIDType as string,",
				"          ReferenceObjectDescriptor as string,",
				"          WID as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     container: ($PublicContainerBlob),",
				"     folderPath: ($PublicFolderBlob),",
				"     fileName: ($PublicFileBlobSCHC),",
				"     documentForm: 'documentPerLine') ~> FLFetchSpendCategoriesHC",
				"source(output(",
				"          FMSFunctionHierarchy as (Descriptor as string, FWID as string, OrganizationReferenceID as string)[],",
				"          LookupKey as string,",
				"          ReferenceID as string,",
				"          ReferenceIDType as string,",
				"          ReferenceObjectDescriptor as string,",
				"          WID as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     container: ($PublicContainerBlob),",
				"     folderPath: ($PublicFolderBlob),",
				"     fileName: ($PublicFileBlobRCHC),",
				"     documentForm: 'documentPerLine') ~> FLFetchRevenueCategories",
				"FLFetchCostCenterHC keyGenerate(output(CCHC_UniqueKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SurrogateCCHCKey",
				"SurrogateCCHCKey foldDown(unroll(HierarchicParents),",
				"     mapColumn(",
				"          CCHC_UniqueKey,",
				"          ReferenceId,",
				"          Name,",
				"          Inactive,",
				"          CostCenterDescriptor,",
				"          CostCenterWID,",
				"          CostCenterOrganizationReferenceID,",
				"          Descriptor = HierarchicParents.Descriptor,",
				"          WID = HierarchicParents.WID,",
				"          OrganizationReferenceID = HierarchicParents.OrganizationReferenceID,",
				"          FunctionDescriptor,",
				"          FunctionWID,",
				"          CostCenterReferenceID",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenCCHC",
				"FilterCCHC select(mapColumn(",
				"          CCHC_UniqueKey,",
				"          CCHC_ReferenceId = ReferenceId,",
				"          CCHC_Descriptor = Descriptor,",
				"          CCHC_WID = WID,",
				"          CCHC_OrganizationReferenceID = OrganizationReferenceID,",
				"          CCHC_CostCenterReferenceID = CostCenterReferenceID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCCHC",
				"MergeRCHC derive(FL_FunctionCode = iif((equalsIgnoreCase(CCHC_OrganizationReferenceID, 'FMS_L2')  && in(['11800','23160', '23170', '23190', '25190', '30500', '30510', '30520', '99600', '99610','75000'], TargetAccountNumber)), 'FC_0002',\r",
				"\r",
				"iif((equalsIgnoreCase(CCHC_OrganizationReferenceID, 'FMS_L2') && not(in(['99903'], TargetAccountNumber)) && in(['MISC_INCOME_EXP','GLVS_TOTAL'], TargetAcccountSegmentRollUp)), 'FC_0002',\r",
				"\r",
				"iif((equalsIgnoreCase(CCHC_OrganizationReferenceID, 'FMS_L2') && in(['TOTAL_REVENUE'], TargetAcccountSegmentRollUp) && equalsIgnoreCase(PLHC_OrganizationReferenceID, 'ALL_DRY_PRODUCT_LINES')), 'FC_0001', \r",
				"\r",
				"iif((equalsIgnoreCase(CCHC_OrganizationReferenceID, 'FMS_L2') && equalsIgnoreCase(SCHC_OrganizationReferenceID, 'FMS_ADMIN_FUNCTION')), 'FC_0002', \r",
				"\r",
				"iif((equalsIgnoreCase(CCHC_OrganizationReferenceID, 'FMS_L2') && equalsIgnoreCase(SCHC_OrganizationReferenceID, 'FMS_OPS_FUNCTION')), 'FC_0001', \r",
				"\r",
				"iif((equalsIgnoreCase(CCHC_OrganizationReferenceID, 'FMS_L2') && equalsIgnoreCase(RCHC_OrganizationReferenceID, 'FMS_Admin_Function_RC')) , 'FC_0002',\r",
				"\r",
				"iif((equalsIgnoreCase(CCHC_OrganizationReferenceID, 'FMS_L2') && equalsIgnoreCase(RCHC_OrganizationReferenceID, 'FMS_Ops_Function_RC')) , 'FC_0001',\r",
				"\r",
				"CC_FunctionOrganizationReferenceId\r",
				"\r",
				")))))))) ~> DeriveFunctionCode",
				"FlattenCCHC filter(equalsIgnoreCase(OrganizationReferenceID, 'FMS_L2')) ~> FilterCCHC",
				"SurrogateCCHCKey select(mapColumn(",
				"          CC_ReferenceId = ReferenceId,",
				"          CC_CostCenterReferenceID = CostCenterReferenceID,",
				"          CC_FunctionOrganizationReferenceId = FunctionOrganizationReferenceId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAllCC",
				"FLFetchProductLineHC keyGenerate(output(PLHC_UniqueKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SurrogatePLKey",
				"SurrogatePLKey foldDown(unroll(HierarchicParents),",
				"     mapColumn(",
				"          Availibility_Date,",
				"          Descriptor = HierarchicParents.Descriptor,",
				"          OrganizationReferenceID = HierarchicParents.OrganizationReferenceID,",
				"          WID = HierarchicParents.WID,",
				"          Inactive,",
				"          InactiveDate,",
				"          LastUpdatedDate,",
				"          Name,",
				"          ProductLineCode,",
				"          ReferenceID,",
				"          PLHC_UniqueKey",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenPLHC",
				"FlattenPLHC filter(equalsIgnoreCase(OrganizationReferenceID, 'ALL_DRY_PRODUCT_LINES')) ~> FilterPLHC",
				"FilterPLHC select(mapColumn(",
				"          PLHC_OrganizationReferenceID = OrganizationReferenceID,",
				"          PLHC_Name = Name,",
				"          PLHC_ProductLineCode = ProductLineCode,",
				"          PLHC_ReferenceID = ReferenceID,",
				"          PLHC_UniqueKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPLHC",
				"FLFetchSpendCategoriesHC keyGenerate(output(SCHC_UniqueKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SurrogateSCKey",
				"SurrogateSCKey foldDown(unroll(FMSFunctionHierarchy),",
				"     mapColumn(",
				"          LookupKey,",
				"          ReferenceID,",
				"          ReferenceIDType,",
				"          ReferenceObjectDescriptor,",
				"          SCHC_UniqueKey,",
				"          OrganizationReferenceID = FMSFunctionHierarchy.OrganizationReferenceID,",
				"          WID = FMSFunctionHierarchy.WID,",
				"          Descriptor = FMSFunctionHierarchy.Descriptor",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenSCHC",
				"FlattenSCHC filter(equalsIgnoreCase(OrganizationReferenceID, 'FMS_ADMIN_FUNCTION') || equalsIgnoreCase(OrganizationReferenceID, 'FMS_OPS_FUNCTION')) ~> FilterSCHC",
				"FilterSCHC select(mapColumn(",
				"          SCHC_ReferenceID = ReferenceID,",
				"          SCHC_UniqueKey,",
				"          SCHC_OrganizationReferenceID = OrganizationReferenceID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSCHC",
				"FunctionCodeRulesInput, SelectAllCC join(TargetCostCenter == CC_CostCenterReferenceID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeCC",
				"MergeCC, SelectCCHC join(TargetCostCenter == CCHC_CostCenterReferenceID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeCCHC",
				"MergeCCHC, SelectPLHC join(TargetProductLine == PLHC_ReferenceID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergePLHC",
				"MergePLHC, SelectSCHC join(TargetSpendCategory == SCHC_ReferenceID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeSCHC",
				"FLFetchRevenueCategories keyGenerate(output(RCHC_UniqueKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SurrogateRCKey",
				"FlattenRCHC filter(equalsIgnoreCase(OrganizationReferenceID, 'FMS_Admin_Function_RC') || equalsIgnoreCase(OrganizationReferenceID, 'FMS_Ops_Function_RC')) ~> FilterRCHC",
				"FilterRCHC select(mapColumn(",
				"          RCHC_ReferenceID = ReferenceID,",
				"          RCHC_UniqueKey,",
				"          RCHC_OrganizationReferenceID = OrganizationReferenceID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRCHC",
				"MergeSCHC, SelectRCHC join(TargetRenvenueCategory == RCHC_ReferenceID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeRCHC",
				"SurrogateRCKey foldDown(unroll(FMSFunctionHierarchy),",
				"     mapColumn(",
				"          LookupKey,",
				"          ReferenceID,",
				"          ReferenceIDType,",
				"          ReferenceObjectDescriptor,",
				"          WID,",
				"          RCHC_UniqueKey,",
				"          OrganizationReferenceID = FMSFunctionHierarchy.OrganizationReferenceID,",
				"          FWID = FMSFunctionHierarchy.FWID,",
				"          Descriptor = FMSFunctionHierarchy.Descriptor",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenRCHC",
				"DeriveFunctionCode output(mapColumn(",
				"          FL_TargetAccountNumber = TargetAccountNumber,",
				"          FL_RecordUniqueId = RecordUniqueId,",
				"          FL_FunctionCode",
				"     )) ~> FunctionCodeRulesOutput"
			]
		}
	}
}