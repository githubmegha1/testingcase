{
	"name": "FININT1001_GenericTargetMap",
	"properties": {
		"folder": {
			"name": "FININT1001_Journal_Entries/FININT1001_Common"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FININT1001_Journal_Read_WritePublicBlob",
						"type": "DatasetReference"
					},
					"name": "FetchSourceData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FININT1001_Journal_Write_ReadPublicBlob",
						"type": "DatasetReference"
					},
					"name": "SinkNullValues"
				},
				{
					"dataset": {
						"referenceName": "FININT1001_Journal_Write_ReadPublicBlob",
						"type": "DatasetReference"
					},
					"name": "SinkCompleted"
				},
				{
					"dataset": {
						"referenceName": "FININT1001_Journal_Write_ReadPublicBlob",
						"type": "DatasetReference"
					},
					"name": "SinkMetadataNull"
				}
			],
			"transformations": [
				{
					"name": "ApplyFunctionCodeRules",
					"flowlet": {
						"referenceName": "FunctionCode_Flowlet",
						"type": "DataFlowReference",
						"parameters": {
							"PublicContainerBlob": "$PublicContainerBlob",
							"PublicFolderBlob": "$PublicFolderBlob",
							"PublicFileBlobCCHC": "$CostCenterHierarchyFileName",
							"PublicFileBlobSCHC": "$SpendCategoryHierarchy",
							"PublichFileBlobPLHC": "$ProductLineHierarchy",
							"PublicFileBlobRCHC": "$RevenueCategoryHierarchy"
						}
					}
				},
				{
					"name": "SelectPeriod"
				},
				{
					"name": "SelectJournalSource"
				},
				{
					"name": "SelectCC"
				},
				{
					"name": "MergePeriod"
				},
				{
					"name": "MergeCC"
				},
				{
					"name": "SelectFdm"
				},
				{
					"name": "FilterByFdmSource"
				},
				{
					"name": "MergeFdm"
				},
				{
					"name": "SelectVehicle"
				},
				{
					"name": "DerivedPriority"
				},
				{
					"name": "WindowPriority"
				},
				{
					"name": "FilterValidRecord"
				},
				{
					"name": "MergeVehicle"
				},
				{
					"name": "SelectProductLine"
				},
				{
					"name": "SelectFunction"
				},
				{
					"name": "MergeFunction"
				},
				{
					"name": "SelectMerge"
				},
				{
					"name": "SelectICC"
				},
				{
					"name": "MergeICC"
				},
				{
					"name": "SplitByMissingKeys"
				},
				{
					"name": "SelectFieldsToSink"
				},
				{
					"name": "FilterActive"
				},
				{
					"name": "DerivedRevenueSpend"
				},
				{
					"name": "DerivedTargetFormat"
				},
				{
					"name": "MapSourceColumn",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "WindowUniqueId"
				},
				{
					"name": "MergeJournalSource"
				},
				{
					"name": "SelectSuspense"
				},
				{
					"name": "MergeSuspenseFdm"
				},
				{
					"name": "AggregateMetadata"
				},
				{
					"name": "SelectCurrency"
				},
				{
					"name": "MergeCurrency"
				},
				{
					"name": "SelectJSOverrideCateg"
				},
				{
					"name": "MergeJSOverrideCateg"
				},
				{
					"name": "SelectPLAccountRulesPre"
				},
				{
					"name": "SelectCCHCProductLine"
				},
				{
					"name": "SelectPLAccountRulesPost"
				},
				{
					"name": "FilterPLAccountRulesPre"
				},
				{
					"name": "FilterPLAccountRulesPost"
				},
				{
					"name": "MergePreProductLine"
				},
				{
					"name": "DerivedPLSplitColumn"
				},
				{
					"name": "MergeCCHCProductLine"
				},
				{
					"name": "MergePostProductLine"
				},
				{
					"name": "MergeProductLine"
				},
				{
					"name": "AggregateDistinctPLValues"
				},
				{
					"name": "MergeDistinctPLHierarchy"
				},
				{
					"name": "DerivedFinalPL"
				},
				{
					"name": "FilterFinalPL"
				},
				{
					"name": "MergeCCHCFunction"
				},
				{
					"name": "MergePreFunction"
				},
				{
					"name": "MergePostFunction"
				},
				{
					"name": "DerivedFinalFunction"
				},
				{
					"name": "FilterFinalFunction"
				},
				{
					"name": "FunctionFindDuplicates"
				},
				{
					"name": "ProductLineFindDuplicates"
				},
				{
					"name": "PLARPreTarget"
				},
				{
					"name": "FuncPreTarget"
				},
				{
					"name": "MergeFunctionFDM"
				},
				{
					"name": "SelectFunctionFDM"
				},
				{
					"name": "SelectInterCompanyCC"
				},
				{
					"name": "MergeInterCompanyCC"
				},
				{
					"name": "DerivedTargetFields"
				},
				{
					"name": "DerivedIntercompanyUOM"
				},
				{
					"name": "MergeUOMExclude"
				},
				{
					"name": "MergeUnitOfMeasure"
				},
				{
					"name": "MergeEmployee"
				},
				{
					"name": "MergeActiveCC"
				},
				{
					"name": "SelectActiveCC"
				},
				{
					"name": "SourceCCReplaced"
				},
				{
					"name": "SelectActiveICC"
				},
				{
					"name": "MergeActiveICC"
				},
				{
					"name": "MergeDefaultActiveCC"
				},
				{
					"name": "MergeDefaultActiveICC"
				},
				{
					"name": "ReplacedSourceKey"
				},
				{
					"name": "MergeFinalOutput"
				},
				{
					"name": "DeriveFunctionCode"
				},
				{
					"name": "SelectFinalOutput"
				},
				{
					"name": "SkipToNextAccPeriodForWorkday5and6"
				},
				{
					"name": "MergePeriodAdj"
				}
			],
			"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('roundRobin', 20)) ~> FetchSourceData\nDerivedTargetFormat compose(mapParameter(\n\t\tPublicContainerBlob = $PublicContainerBlob,\n\t\tPublicFolderBlob = $PublicFolderBlob,\n\t\tPublicFileBlobCCHC = $CostCenterHierarchyFileName,\n\t\tPublicFileBlobSCHC = $SpendCategoryHierarchy,\n\t\tPublichFileBlobPLHC = $ProductLineHierarchy,\n\t\tPublicFileBlobRCHC = $RevenueCategoryHierarchy\n\t),\n\tmapColumn(\n\t\tTargetAccountNumber = TargetLedgerAccountValue,\n\t\tTargetAcccountSegmentRollUp = FL_TargetAccountSegmentRollUp,\n\t\tTargetCostCenter = TargetCostCenterValue,\n\t\tTargetSpendCategory,\n\t\tTargetRenvenueCategory = TargetRevenueCategory,\n\t\tTargetProductLine,\n\t\tRecordUniqueId = TargetUniqueIdentifier\n\t),\n\tcomposition: 'FunctionCode_Flowlet') ~> ApplyFunctionCodeRules@(FunctionCodeRulesOutput)\n select(mapColumn(\n\t\tMapPeriod_TargetAccountDateValue = priorMonthDate,\n\t\tMapPeriod_CloseDay = closeDay,\n\t\tMapPeriod_InputDate = inputDate,\n\t\tMapPeriod_PriorMonthDate = priorMonthDate,\n\t\tMapPeriod_FirstDayCloseDate = firstDayCloseDate\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectPeriod\n select(mapColumn(\n\t\tMapJournalSource_TargetJournalSourceValue = targetValue,\n\t\tMapJournalSource_JournalSourceKey = sourceValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectJournalSource\n select(mapColumn(\n\t\tCC_ReferenceIdKey = ReferenceId,\n\t\tCC_TargetCostCenterValue = CostCenterOrganizationReferenceID,\n\t\tCC_TargetCompanyValue = CompanyRestrictionsOrganizationReferenceID,\n\t\tCC_TargetSegmentValue = SegmentOrganizationReferenceID,\n\t\tCC_TargetVerticalValue = VerticalOrganizationReferenceID,\n\t\tCC_TargetRegionValue = RegionOrganizationReferenceID,\n\t\tCC_TargetLocationValue = LocRefID,\n\t\tCC_TargetFunctionValue = FunctionOrganizationReferenceID,\n\t\tCC_TargetLegalCompanyCode = LegalCompanyCode,\n\t\tCC_TargetProductLineValue = ProductLineOrganizationReferenceID,\n\t\tCC_TargetLegalCountry = LegalCountry,\n\t\tCC_TargetCompanyCurrency = CompanyCurrency,\n\t\tCC_Inactive = Inactive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCC\nWindowUniqueId, SelectPeriod join(true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tpartitionBy('roundRobin', 8),\n\tbroadcast: 'auto')~> MergePeriod\nReplacedSourceKey, SelectCC join(SourceCostCenterKey == CC_ReferenceIdKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeCC\nMergeSuspenseFdm select(mapColumn(\n\t\tFDM_Key = SourceAccountIdentifier,\n\t\tFDM_SourceFunctionIdentifier = SourceFunctionIdentifier,\n\t\tFDM_SourceDefaultProductLineIdentifier = SourceDefaultProductLineIdentifier,\n\t\tFDM_TargetLedgerAccountValue = TargetAccountIdentifier,\n\t\tFDM_TargetSpendCategoryValue = TargetCategoryValue,\n\t\tFDM_TargetRevenueCategoryValue = TargetRevenueValue,\n\t\tFDM_TargetSegmentValue = TargetSegmentIdentifier,\n\t\tFDM_TargetBookCodeValue = TargetBookCodeIdentifier,\n\t\tFDM_TargetUnitOfMeasureUSValue = TargetUnitOfMeasureUSIdentifier,\n\t\tFDM_TargetUnitOfMeasureCanadaValue = TargetUnitOfMeasureCanadaIdentifier,\n\t\tMapSuspense_TargetSuspenseValue,\n\t\tFDM_TargetAccountTypeDescription = TargetAccountTypeDescription,\n\t\tFDM_TargetSalesItemIdentifier = TargetSalesItemIdentifier,\n\t\tFDM_TargetRevenueOverrideValue = TargetRevenueOverrideValue,\n\t\tFDM_TargetSpendOverrideValue = TargetSpendOverrideValue,\n\t\tFDM_TargetProductLineIdentifier = TargetProductLineIdentifier,\n\t\tFDM_TargetInterCompanyIdentifier = TargetInterCompanyIdentifier,\n\t\tFDM_TargetCompanyIdentifier = TargetCompanyIdentifier,\n\t\tFDM_SourceSubSourceIdentifier = SourceSubSourceIdentifier,\n\t\tFDM_SourceDefaultFunctionIdentifier = SourceDefaultFunctionIdentifier,\n\t\tFDM_TargetLedgerSheetCode = TargetLedgerSheetCode,\n\t\tFDM_RuleSetIdentifier = RuleSetIdentifier,\n\t\tFDM_TargetProjectAccountingTypeIdentifier = TargetProjectAccountingTypeIdentifier,\n\t\tFDM_JournalLineMappingId = JournalLineMappingId,\n\t\tFDM_SourceDefaultVehicleFlag = SourceDefaultVehicleFlag,\n\t\tFDM_SourceDefaultVehicleIdentifier = SourceDefaultVehicleIdentifier,\n\t\tFDM_TargetAccountSegmentRollUp = TargetAccountSegmentRollUp\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectFdm\n filter(equalsIgnoreCase(SourceDataSourceName, $FdmSourceDataSource) && equalsIgnoreCase(TargetDataSourceName, $FdmTargetDataSource)) ~> FilterByFdmSource\nMergeEmployee, SelectFdm join(SourceFdmKey == FDM_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeFdm\nFilterActive select(mapColumn(\n\t\tMapVehicle_TargetVehicleValue = ReferenceID,\n\t\tMapVehicle_VehicleKey = Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVehicle\nSkipToNextAccPeriodForWorkday5and6 derive(Priority = case( FDM_RuleSetIdentifier == 'TargetBased', \r\n    \r\niif(equalsIgnoreCase(CC_TargetCompanyValue, FDM_TargetCompanyIdentifier), \r\n    1, \r\niif(equalsIgnoreCase(CC_TargetSegmentValue, FDM_TargetSegmentValue), \r\n    2,\r\niif(equalsIgnoreCase(SourceProjectType, FDM_TargetProjectAccountingTypeIdentifier), \r\n    3,\r\niif(isNull(FDM_TargetSegmentValue) && isNull(FDM_TargetCompanyIdentifier) && isNull(FDM_TargetProjectAccountingTypeIdentifier), \r\n    4, \r\n    5)))),\r\n    \r\n    FDM_RuleSetIdentifier == 'SourceBased', \r\n    iif(equalsIgnoreCase(SourceSubSourceKey, FDM_SourceSubSourceIdentifier), \r\n    1, \r\n    iif(equalsIgnoreCase(SourceFunctionKey, FDM_SourceFunctionIdentifier), \r\n    2, \r\n    iif(equalsIgnoreCase(SourceSubFunctionKey, FDM_SourceDefaultFunctionIdentifier), \r\n    3, \r\n    iif(isNull(FDM_SourceSubSourceIdentifier) && isNull(FDM_SourceFunctionIdentifier) && isNull(FDM_SourceDefaultFunctionIdentifier), \r\n    4, \r\n    9)))),\r\n    99\r\n    ),\n\t\tSourceProductLineKey = iif(SourceProductLineKey == '' && !isNull(FDM_SourceDefaultProductLineIdentifier), FDM_SourceDefaultProductLineIdentifier, SourceProductLineKey),\n\t\tSourceFunctionKey = iif(SourceFunctionKey == '' && !isNull(FDM_SourceDefaultFunctionIdentifier), FDM_SourceDefaultFunctionIdentifier, SourceFunctionKey),\n\t\tSourceProjectType = iif(SourceProject == '' || isNull(SourceProject), '', \r\n    iif(FDM_TargetLedgerSheetCode == 'PL' && SourceProjectType != '' && not(isNull(SourceProjectType)), 'FIN_Expense', SourceProjectType)),\n\t\tSourceFdmKeyNumeric = regexExtract(SourceFdmKey, '(\\\\d+)')) ~> DerivedPriority\nDerivedPriority window(over(UniqueIdentifier),\n\tasc(Priority, true),\n\tValidRecord = min(Priority),\n\t\tRowPriority = rowNumber(),\n\tpartitionBy('roundRobin', 8)) ~> WindowPriority\nWindowPriority filter(Priority == ValidRecord) ~> FilterValidRecord\nFilterValidRecord, SelectVehicle join(SourceVehicleKey == MapVehicle_VehicleKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tpartitionBy('roundRobin', 12),\n\tbroadcast: 'auto')~> MergeVehicle\n select(mapColumn(\n\t\tMapProductLine_ProductLineKey = sourceValue,\n\t\tMapProductLine_TargetProductLineValue = targetValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductLine\n select(mapColumn(\n\t\tMapFunction_FunctionKey = sourceValue,\n\t\tMapFunction_TargetFunctionValue = targetValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFunction\nMergeVehicle, SelectFunction join(SourceFunctionKey == MapFunction_FunctionKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeFunction\nMergeUnitOfMeasure select(skipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectMerge\nSelectCC select(mapColumn(\n\t\tCC_ICC_Key = CC_ReferenceIdKey,\n\t\tCC_TargetIssuingCostCenterValue = CC_TargetCostCenterValue,\n\t\tCC_TargetIssuingCompanyValue = CC_TargetCompanyValue,\n\t\tCC_TargetIssuingRegionValue = CC_TargetRegionValue,\n\t\tCC_TargetIssuingLegalCountry = CC_TargetLegalCountry,\n\t\tCC_TargetIssuingCompanyCurrency = CC_TargetCompanyCurrency,\n\t\tCC_TargetIssuingInactive = CC_Inactive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectICC\nMergeCurrency, SelectICC join(SourceIssuingCostCenterKey == CC_ICC_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeICC\nSelectMerge split(isNull(FDM_TargetLedgerAccountValue) || isNull(CC_TargetCostCenterValue) || isNull(MapJournalSource_TargetJournalSourceValue),\n\tdisjoint: false) ~> SplitByMissingKeys@(RecordsWithNullValues, RecordsCompleted)\nSplitByMissingKeys@RecordsWithNullValues select(skipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectFieldsToSink\n filter(Inactive == '0' && instr(ReferenceID, 'DNU') == 0,\n\tpartitionBy('roundRobin', 8)) ~> FilterActive\nFilterByFdmSource derive(TargetCategoryValue = iif(equalsIgnoreCase(TargetCategoryTypeIdentifier, 'Spend'), TargetCategoryIdentifier, ''),\n\t\tTargetRevenueValue = iif(equalsIgnoreCase(TargetCategoryTypeIdentifier, 'Revenue'), TargetCategoryIdentifier, ''),\n\t\tTargetRevenueOverrideValue = iif(equalsIgnoreCase(TargetOverrideCategoryTypeIdentifier, 'Revenue'), TargetOverrideCategoryIdentifier, ''),\n\t\tTargetSpendOverrideValue = iif(equalsIgnoreCase(TargetOverrideCategoryTypeIdentifier, 'Spend'), TargetOverrideCategoryIdentifier, '')) ~> DerivedRevenueSpend\nSplitByMissingKeys@RecordsCompleted derive(TargetUniqueIdentifier = UniqueIdentifier,\n\t\tTargetCreditAmount = abs(toDecimal(SourceCreditAmount, 16, 2)),\n\t\tTargetDebitAmount = abs(toDecimal(SourceDebitAmount, 16, 2)),\n\t\tTargetIntercompanyPkValue = SourceAccountingDate + iif(isNull(SourceOptionalKey1Value), '', '--' + SourceOptionalKey1Value),\n\t\tTargetSuspendPkValue = '',\n\t\tTargetVersionValue = 'v34.0',\n\t\tTargetAddOnlyValue = 'true',\n\t\tTargetCreateJournalErrorValue = 'true',\n\t\tTargetAutoCompleteValue = 'true',\n\t\tTargetSubmitValue = 'true',\n\t\tTargetLockedWdValue = iif(isNull(SourceLockJournal), 'true', SourceLockJournal),\n\t\tTargetLedgerTypeValue = 'ACTUALS',\n\t\tTargetBalancingWorktagValue = '',\n\t\tTargetExternalRefValue = SourceExternalReferenceId,\n\t\tTargetHeaderMemoValue = SourceHeaderMemo,\n\t\tTargetRecordQuantity = 'true',\n\t\tTargetSupplierValue = SourceSupplier,\n\t\tTargetCustomerValue = SourceCustomer,\n\t\tTargetBalanceBySourcePkValue = SourceAccountingDate,\n\t\tTargetCurrencyValue = SourceCurrencyKey,\n\t\tTargetSrcAccountValue = SourceFdmKey,\n\t\tTargetProjectValue = SourceProject,\n\t\tTargetProjectTypeValue = SourceProjectType,\n\t\tTargetIntercompanyOptionalKey = iifNull(SourceOptionalKey2Value, '', SourceOptionalKey2Value),\n\t\tTargetPriority = Priority,\n\t\tTargetCreateReversal = iif (toBoolean(SourceCreateReversal)==true(), 'true', 'false'),\n\t\tTargetReversalDate = iif(toBoolean(SourceCreateReversal)==true(),toString(addDays(lastDayOfMonth(toDate(SourceAccountingDate)) , 1)), ''),\n\t\tTargetAccountingJournaldentifier = SourceAccountingJournaldentifier) ~> DerivedTargetFormat\nFetchSourceData derive(SourceAccountingDate = toString(byName('SourceAccountingDate')),\n\t\tSourceCostCenterKey = toString(byName('SourceCostCenterKey')),\n\t\tSourceFdmKey = toString(byName('SourceFdmKey')),\n\t\tSourceJournalSourceKey = toString(byName('SourceJournalSourceKey')),\n\t\tSourceIssuingCostCenterKey = toString(byName('SourceIssuingCostCenterKey')),\n\t\tSourceVehicleKey = toString(byName('SourceVehicleKey')),\n\t\tSourceProductLineKey = iifNull(toString(byName('SourceProductLineKey')), ''),\n\t\tSourceFunctionKey = iifNull(toString(byName('SourceFunctionKey')), ''),\n\t\tSourceCreditAmount = toString(byName('SourceCreditAmount')),\n\t\tSourceDebitAmount = toString(byName('SourceDebitAmount')),\n\t\tSourceLineMemo = toString(byName('SourceLineMemo')),\n\t\tSourceHeaderMemo = toString(byName('SourceHeaderMemo')),\n\t\tSourceExternalReferenceId = toString(byName('SourceExternalReferenceId')),\n\t\tSourceBookCode = toString(byName('SourceBookCode')),\n\t\tSourceUnitMeasure = toString(byName('SourceUnitMeasure')),\n\t\tSourceVertical = toString(byName('SourceVertical')),\n\t\tSourceQuantity = toString(byName('SourceQuantity')),\n\t\tSourceSupplier = toString(byName('SourceSupplier')),\n\t\tSourceCustomer = toString(byName('SourceCustomer')),\n\t\tSourceLockJournal = toString(byName('SourceLockJournal')),\n\t\tSourceOptionalKey1Value = toString(byName('SourceOptionalKey1Value')),\n\t\tSourceOptionalKey2Value = toString(byName('SourceOptionalKey2Value')),\n\t\tSourceIntercompanyCostCenterKey = toString(byName('SourceIntercompanyCostCenterKey')),\n\t\tSourceCurrencyKey = toString(byName('SourceCurrencyKey')),\n\t\tSourceSubSourceKey = toString(byName('SourceSubSourceKey')),\n\t\tSourceSkipQtyConversion = toString(byName('SourceSkipQtyConversion')),\n\t\tSourceEmployee = toString(byName('SourceEmployee')),\n\t\tSourceProject = toString(byName('SourceProject')),\n\t\tSourceProjectType = toString(byName('SourceProjectType')),\n\t\tSourceSubFunctionKey = toString(byName('SourceSubFunctionKey')),\n\t\tSourceSubsource = toString(byName('SourceSubsource')),\n\t\tSourceAdjustmentJournal = toString(byName('SourceAdjustmentJournal')),\n\t\tSourceCreateReversal = toString(byName('SourceCreateReversal')),\n\t\tSourceAccountingJournaldentifier = toString(byName('SourceAccountingJournaldentifier'))) ~> MapSourceColumn\nMapSourceColumn window(asc(SourceAccountingDate, true),\n\tUniqueIdentifier = rowNumber()) ~> WindowUniqueId\nMergePeriodAdj, SelectJournalSource join(lower(SourceJournalSourceKey) == lower(MapJournalSource_JournalSourceKey),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeJournalSource\n select(mapColumn(\n\t\tMapSuspense_SuspenseKey = sourceValue,\n\t\tMapSuspense_TargetSuspenseValue = targetValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSuspense\nDerivedRevenueSpend, SelectSuspense join(SourceLedgerSheetCode == MapSuspense_SuspenseKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeSuspenseFdm\nSelectFieldsToSink aggregate(TotalCount = count(),\n\t\tCount_FDM_TargetLedgerAccountValue = countIf(isNull(FDM_TargetLedgerAccountValue)),\n\t\tCount_CC_TargetCostCenterValue = countIf(isNull(CC_TargetCostCenterValue)),\n\t\tCount_MapJournalSource_TargetJournalSourceValue = countIf(isNull(MapJournalSource_TargetJournalSourceValue))) ~> AggregateMetadata\n select(mapColumn(\n\t\tMapCurrency_CurrencyKey = sourceValue,\n\t\tMapCurrency_TargetCurrencyValue = targetValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrency\nMergeFunctionFDM, SelectCurrency join(SourceCurrencyKey == MapCurrency_CurrencyKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeCurrency\n select(mapColumn(\n\t\tMapJSOverride_JSOverrideKey = sourceValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectJSOverrideCateg\nMergeInterCompanyCC, SelectJSOverrideCateg join(SourceJournalSourceKey == MapJSOverride_JSOverrideKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeJSOverrideCateg\nFilterPLAccountRulesPre select(mapColumn(\n\t\tPLARPre_targetValue = targetValue,\n\t\tPLARPre_Hierarchy = Hierarchy,\n\t\tPLARPre_ProductLine = ProductLine,\n\t\tPLARPre_StartAccountNumber = StartAccountNumber,\n\t\tPLARPre_EndAccountNumber = EndAccountNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPLAccountRulesPre\nMergeDistinctPLHierarchy select(mapColumn(\n\t\tCCHCPL_ReferenceId = ReferenceId,\n\t\tCCHCPL_HierarchicDescriptor = Descriptor,\n\t\tCCHCPL_HierarchicWID = WID,\n\t\tCCHCPL_HierarchicOrganizationReferenceID = OrganizationReferenceID,\n\t\tCCHCPL_UniqueKey = CCHC_UniqueKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCCHCProductLine\nFilterPLAccountRulesPost select(mapColumn(\n\t\tPLARPost_targetValue = targetValue,\n\t\tPLARPost_Hierarchy = Hierarchy,\n\t\tPLARPost_ProductLine = ProductLine,\n\t\tPLARPost_StartAccountNumber = StartAccountNumber,\n\t\tPLARPost_EndAccountNumber = EndAccountNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPLAccountRulesPost\nDerivedPLSplitColumn filter(startsWith(targetValue, '*')) ~> FilterPLAccountRulesPre\nDerivedPLSplitColumn filter(not(startsWith(targetValue, '*'))) ~> FilterPLAccountRulesPost\nMergeCCHCProductLine, SelectPLAccountRulesPre join(CCHCPL_HierarchicOrganizationReferenceID == PLARPre_Hierarchy\n\t&& SourceProductLineKey == PLARPre_ProductLine\n\t&& toInteger(SourceFdmKeyNumeric) >= toInteger(PLARPre_StartAccountNumber)\n\t&& toInteger(SourceFdmKeyNumeric) <= toInteger(PLARPre_EndAccountNumber),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> MergePreProductLine\n derive(Hierarchy = toString(split(sourceValue, '|')[1]),\n\t\tProductLine = toString(split(sourceValue, '|')[2]),\n\t\tStartAccountNumber = toString(split(sourceValue, '|')[3]),\n\t\tEndAccountNumber = toString(split(sourceValue, '|')[4])) ~> DerivedPLSplitColumn\nMergeJSOverrideCateg, SelectCCHCProductLine join(CC_ReferenceIdKey == CCHCPL_ReferenceId,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeCCHCProductLine\nPLARPreTarget, SelectPLAccountRulesPost join(CCHCPL_HierarchicOrganizationReferenceID == PLARPost_Hierarchy\n\t&& iifNull(PL_PreTargetValue, SourceProductLineKey) == PLARPost_ProductLine\n\t&& toInteger(SourceFdmKeyNumeric) >= toInteger(PLARPost_StartAccountNumber)\n\t&& toInteger(SourceFdmKeyNumeric) <= toInteger(PLARPost_EndAccountNumber),\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> MergePostProductLine\nMergePostProductLine, SelectProductLine join(SourceProductLineKey == MapProductLine_ProductLineKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeProductLine\nDerivedPLSplitColumn aggregate(groupBy(Hierarchy),\n\tCount = count()) ~> AggregateDistinctPLValues\nAggregateDistinctPLValues join(OrganizationReferenceID == Hierarchy,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeDistinctPLHierarchy\nMergeProductLine derive(PL_TargetProductLineValue = iif(isNull(FDM_TargetProductLineIdentifier),\r\n    iif(isNull(PLARPost_targetValue), \r\n        iif(isNull(PL_PreTargetValue), \r\n            iifNull(MapProductLine_TargetProductLineValue, 'PL_NONE'), \r\n            replace(PL_PreTargetValue, '*', '')), \r\n        PLARPost_targetValue),    \r\n    FDM_TargetProductLineIdentifier),\n\t\tPL_Weightage = iif(isNull(PLARPost_targetValue), \r\n        iif(isNull(PL_PreTargetValue), \r\n            1, \r\n            2), \r\n        3)) ~> DerivedFinalPL\nProductLineFindDuplicates filter(PL_RowNumber == 1) ~> FilterFinalPL\nFilterFinalPL join(CC_ReferenceIdKey == CCHCFunc_ReferenceId,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeCCHCFunction\nMergeCCHCFunction join(CCHCFunc_HierarchicOrganizationReferenceID == FuncPRE_Hierarchy\n\t&& CC_TargetSegmentValue == FuncPRE_Segment\n\t&& iifNull(MapFunction_TargetFunctionValue, '') == FuncPRE_FunctionSource\n\t&& iifNull(MapFunctionFDM_TargetFunctionValue, '') == FuncPRE_FunctionFDM\n\t&& $FdmSourceDataSource == FuncPRE_FunctionSystemSource,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> MergePreFunction\nFuncPreTarget join(CCHCFunc_HierarchicOrganizationReferenceID == FuncPost_Hierarchy\n\t&& CC_TargetSegmentValue == FuncPost_Segment\n\t&& iifNull(Func_PreTargetValue, MapFunction_TargetFunctionValue,'') == FuncPost_FunctionSource\n\t&& iifNull(MapFunctionFDM_TargetFunctionValue, '') == FuncPost_FunctionFDM\n\t&& $FdmSourceDataSource == FuncPost_FunctionSystemSource,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> MergePostFunction\nMergePostFunction derive(Func_TargetFunctionValue = iif(isNull(FuncPost_TargetValue), \r\n    iif(isNull(Func_PreTargetValue), \r\n        iifNull(CC_TargetFunctionValue, ''), \r\n        replace(Func_PreTargetValue, '*', '')), \r\n    FuncPost_TargetValue),\n\t\tFunc_Weightage = iif(isNull(FuncPost_TargetValue), \r\n    iif(isNull(Func_PreTargetValue), \r\n        1, \r\n        2), \r\n    3)) ~> DerivedFinalFunction\nFunctionFindDuplicates filter(Func_RowNumber == 1) ~> FilterFinalFunction\nDerivedFinalFunction window(over(UniqueIdentifier),\n\tdesc(Func_Weightage, true),\n\tFunc_RowNumber = rowNumber()) ~> FunctionFindDuplicates\nDerivedFinalPL window(over(UniqueIdentifier),\n\tdesc(PL_Weightage, true),\n\tPL_RowNumber = rowNumber()) ~> ProductLineFindDuplicates\nMergePreProductLine window(over(UniqueIdentifier),\n\tasc(PLARPre_targetValue, false),\n\tPL_PreTargetValue = first(PLARPre_targetValue)) ~> PLARPreTarget\nMergePreFunction window(over(UniqueIdentifier),\n\tasc(FuncPRE_TargetValue, false),\n\tFunc_PreTargetValue = first(FuncPRE_TargetValue)) ~> FuncPreTarget\nMergeFunction, SelectFunctionFDM join(FDM_SourceFunctionIdentifier == MapFunctionFDM_FunctionKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeFunctionFDM\nSelectFunction select(mapColumn(\n\t\tMapFunctionFDM_FunctionKey = MapFunction_FunctionKey,\n\t\tMapFunctionFDM_TargetFunctionValue = MapFunction_TargetFunctionValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFunctionFDM\nSelectICC select(mapColumn(\n\t\tCC_ReferenceIdKeyInterComp = CC_ICC_Key,\n\t\tCC_TargetInterCompCostCenterValue = CC_TargetIssuingCostCenterValue,\n\t\tCC_TargetInterCompanyAffiliateValue = CC_TargetIssuingCompanyValue,\n\t\tCC_TargetInterCompanyRegionValue = CC_TargetIssuingRegionValue,\n\t\tCC_TargetInterCompanyLegalCountry = CC_TargetIssuingLegalCountry,\n\t\tCC_TargetInterCompanyCompanyCurrency = CC_TargetIssuingCompanyCurrency,\n\t\tCC_TargetInterCompanyInactive = CC_TargetIssuingInactive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectInterCompanyCC\nMergeICC, SelectInterCompanyCC join(SourceIntercompanyCostCenterKey == CC_ReferenceIdKeyInterComp,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeInterCompanyCC\nFilterFinalFunction derive(DerivedTargetIntercompanyValue = iif(iifNull(FDM_TargetInterCompanyIdentifier, '') != '', FDM_TargetInterCompanyIdentifier, iif(iifNull(CC_TargetInterCompanyAffiliateValue, '') != '', CC_TargetInterCompanyAffiliateValue,iif(iifNull(CC_TargetIssuingCompanyValue, '') != CC_TargetCompanyValue && iifNull(CC_TargetIssuingCompanyValue, '') != '', CC_TargetIssuingCompanyValue,CC_TargetCompanyValue))),\n\t\tDerivedUnitOfMeasureValue = iif(toDecimal(SourceQuantity, 16, 2) != 0, iif(isNull(SourceUnitMeasure), iif(CC_TargetCompanyCurrency == 'CAD', FDM_TargetUnitOfMeasureCanadaValue, FDM_TargetUnitOfMeasureUSValue), SourceUnitMeasure),''),\n\t\tDerivedIntercompanyCurrency = iif(iifNull(FDM_TargetInterCompanyIdentifier, '') != '', 'USD', iif(iifNull(CC_TargetInterCompanyAffiliateValue, '') != '', CC_TargetInterCompanyCompanyCurrency,iif(iifNull(CC_TargetIssuingCompanyValue, '') != CC_TargetCompanyValue, CC_TargetIssuingCompanyCurrency,CC_TargetCompanyCurrency))),\n\t\tDerivedTargetAccountDateValue = iif(MapPeriod_TargetAccountDateValue > toDate(SourceAccountingDate), MapPeriod_TargetAccountDateValue, toDate(SourceAccountingDate))) ~> DerivedTargetFields\nDerivedTargetFields derive(DerivedTargetIntercompanyUOM = iif(toDecimal(SourceQuantity, 16, 2) != 0, iif(isNull(SourceUnitMeasure), iif(DerivedIntercompanyCurrency == 'CAD', FDM_TargetUnitOfMeasureCanadaValue, FDM_TargetUnitOfMeasureUSValue), SourceUnitMeasure),'')) ~> DerivedIntercompanyUOM\nDerivedIntercompanyUOM join(MapJournalSource_TargetJournalSourceValue == UOMEXCL_sourceValue,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeUOMExclude\nMergeUOMExclude join(DerivedUnitOfMeasureValue == RightSourceValue\n\t&& DerivedTargetIntercompanyUOM == LeftSourceValue,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeUnitOfMeasure\nMergeCC join(SourceEmployee == EMP_Employee_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeEmployee\nMergeJournalSource, SelectActiveCC join(SourceCostCenterKey == CC_CheckActiveReferenceIdKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeActiveCC\nSelectCC select(mapColumn(\n\t\tCC_CheckActiveReferenceIdKey = CC_ReferenceIdKey,\n\t\tCC_CheckActiveCostCenterValue = CC_TargetCostCenterValue,\n\t\tCC_CheckActiveSegmentValue = CC_TargetSegmentValue,\n\t\tCC_CheckActiveRegionValue = CC_TargetRegionValue,\n\t\tCC_CheckActiveInactive = CC_Inactive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectActiveCC\nMergeDefaultActiveICC derive(CostCenterReplaced = iif(toBoolean(CC_CheckActiveInactive) == true() && not(isNull(JDICC_CCtargetValue)), true(), false()),\n\t\tIssuingCostCenterReplaced = iif(toBoolean(CC_CheckActiveIssuingInactive) == true() && not(isNull(JDICC_ICCtargetValue)), true(), false())) ~> SourceCCReplaced\nSelectActiveCC select(mapColumn(\n\t\tCC_CheckActiveIssuingReferenceIdKey = CC_CheckActiveReferenceIdKey,\n\t\tCC_CheckActiveIssuingCostCenterValue = CC_CheckActiveCostCenterValue,\n\t\tCC_CheckActiveIssuingSegmentValue = CC_CheckActiveSegmentValue,\n\t\tCC_CheckActiveIssuingRegionValue = CC_CheckActiveRegionValue,\n\t\tCC_CheckActiveIssuingInactive = CC_CheckActiveInactive\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectActiveICC\nMergeActiveCC, SelectActiveICC join(SourceIssuingCostCenterKey == CC_CheckActiveIssuingReferenceIdKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeActiveICC\nMergeActiveICC join(CC_CheckActiveSegmentValue == JDICC_CCSegmentOrganizationReferenceID\n\t&& CC_CheckActiveRegionValue == JDICC_CCRegionOrganizationReferenceID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeDefaultActiveCC\nMergeDefaultActiveCC join(CC_CheckActiveIssuingSegmentValue == JDICC_ICCSegmentOrganizationReferenceID\n\t&& CC_CheckActiveIssuingRegionValue == JDICC_ICCRegionOrganizationReferenceID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeDefaultActiveICC\nSourceCCReplaced derive(SourceCostCenterKey = iif(CostCenterReplaced, JDICC_CCtargetValue, SourceCostCenterKey),\n\t\tSourceIssuingCostCenterKey = iif(IssuingCostCenterReplaced, JDICC_ICCtargetValue, SourceIssuingCostCenterKey),\n\t\tOriginalCostCenter = SourceCostCenterKey,\n\t\tOriginalIssuingCostCenter = SourceIssuingCostCenterKey) ~> ReplacedSourceKey\nApplyFunctionCodeRules@FunctionCodeRulesOutput, DerivedTargetFormat join(FL_RecordUniqueId == TargetUniqueIdentifier,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergeFinalOutput\nMergeFinalOutput derive(TargetFunctionValue = FL_FunctionCode) ~> DeriveFunctionCode\nDeriveFunctionCode select(mapColumn(\n\t\teach(match(startsWith(name,'Target')))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinalOutput\nMergeFdm derive(MapPeriod_TargetAccountDateValue = iif(in(['ServicenowSPM'], MapJournalSource_JournalSourceKey) && in(['4','5','6'], MapPeriod_CloseDay),\r\nMapPeriod_FirstDayCloseDate, \r\niif(not(in(['ENRICH','SAP'], MapJournalSource_TargetJournalSourceValue)) && in(['5','6'], MapPeriod_CloseDay),\r\nMapPeriod_FirstDayCloseDate, \r\nMapPeriod_TargetAccountDateValue))) ~> SkipToNextAccPeriodForWorkday5and6\nMergePeriod join(true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> MergePeriodAdj\nSelectFieldsToSink sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($NullValueFileName)],\n\tpartitionBy('hash', 1)) ~> SinkNullValues\nSelectFinalOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($TargetFileName)],\n\tpartitionBy('hash', 1)) ~> SinkCompleted\nAggregateMetadata sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($MetadataNullValueFileName)],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> SinkMetadataNull"
		}
	}
}